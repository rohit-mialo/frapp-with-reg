import { View, Text, StyleSheet, Image, useWindowDimensions } from 'react-native'
import React, { useEffect, useState, useRef } from 'react'
import { useTensorflowModel } from 'react-native-fast-tflite'
import { Camera, useCameraDevice, useFrameProcessor, useCameraFormat } from 'react-native-vision-camera'
import { runOnJS } from 'react-native-reanimated'
import { useFaceDetector } from 'react-native-vision-camera-face-detector'
import { Worklets } from 'react-native-worklets-core'
import { Canvas, useFont, Circle, Rect, useImage, Text as SkText, Line } from '@shopify/react-native-skia'
import ImageEditor from '@react-native-community/image-editor'
import ImageResizer from '@bam.tech/react-native-image-resizer';
import RNFS from 'react-native-fs';
import SQLite from 'react-native-sqlite-storage';

const userData = [
  {
    userId: "user_1",
    name: "rohit",
    enbeddings: [-0.009220088832080364, 0.03877091407775879, 0.01804375648498535, 0.0017266672803089023, -0.06855811923742294, 0.07214457541704178, -0.0687517300248146, -0.06868740171194077, -0.09033966064453125, -0.019306091591715813, -0.019596660509705544, 0.0115219596773386, -0.008457053452730179, 0.039484020322561264, -0.002224166411906481, -0.05880900099873543, -0.030869632959365845, -0.009765191935002804, 0.0009733715560287237, 0.003767754416912794, -0.1936628520488739, 0.08309288322925568, -0.04777509719133377, 0.016188619658350945, 0.02456856518983841, 0.011250653304159641, -0.05468250438570976, 0.08173301070928574, 0.1926601380109787, -0.05930207297205925, -0.012586448341608047, 0.28976109623908997, 0.09724128246307373, 0.002565285423770547, -0.04865700751543045, 0.1008046492934227, -0.0261812973767519, -0.014548871666193008, 0.002747607883065939, -0.01094589103013277, 0.009463883936405182, 0.005252796690911055, 0.019287265837192535, -0.00913595873862505, 0.008196505717933178, -0.06123584508895874, 0.009160822257399559, 0.004444103688001633, -0.01079742144793272, 0.06427706778049469, 0.06356120854616165, -0.007050579413771629, -0.23729079961776733, -0.0038940957747399807, -0.021929534152150154, 0.007006194908171892, 0.0071892812848091125, 0.0051750424318015575, -0.11031508445739746, 0.034162409603595734, 0.03897663578391075, -0.136505126953125, -0.05089254304766655, 0.04492473602294922, -0.0169292613863945, 0.01775832287967205, -0.007822953164577484, 0.01967795379459858, 0.009648713283240795, 0.001266698818653822, -0.044016920030117035, -0.03472382202744484, -0.08498331904411316, 0.012788319028913975, -0.04182041436433792, 0.009875813499093056, 0.003703691763803363, -0.0010015105362981558, 0.25541257858276367, 0.046859581023454666, -0.008996912278234959, 0.02829194813966751, -0.013869195245206356, 0.19787077605724335, -0.08906096965074539, -0.0036027992609888315, -0.004713902715593576, -0.009401436895132065, 0.04040384665131569, -0.14449971914291382, 0.015253459103405476, -0.001196762197650969, 0.012509368360042572, -0.029001010581851006, -0.017686866223812103, -0.15465708076953888, -0.010484857484698296, 0.006724714767187834, -0.0010327543132007122, 0.004064830485731363, 0.003318348666653037, -0.016157297417521477, -0.008383459411561489, -0.0005165822221897542, -0.00415071053430438, 0.007009307853877544, -0.17482483386993408, 0.0017419552896171808, -0.005793513730168343, 0.022245492786169052, -0.16095316410064697, 0.012124281376600266, 0.012564885430037975, 0.27895858883857727, 0.013894455507397652, 0.06850849837064743, -0.0039909519255161285, -0.04577158764004707, 0.11117731034755707, 0.1117815226316452, 0.15556704998016357, -0.017600825056433678, -0.15439832210540771, -0.0024967954959720373, 0.002401842037215829, -0.003267519874498248, 0.006157702766358852, -0.001042477902956307, -0.0018741379026323557, -0.1165463849902153, 0.014505086466670036, 0.030642518773674965, -0.00013454399595502764, -0.006102895829826593, 0.0716128870844841, -0.014800255186855793, -0.18568699061870575, -0.01071121171116829, 0.009508076123893261, 0.01234138198196888, -0.005046225618571043, 0.000976812094449997, -0.000750480976421386, -0.05735589191317558, -0.08951389044523239, 0.07412293553352356, -0.02080388180911541, -0.0035957559011876583, 0.009035998955368996, -0.014165734872221947, -0.011037692427635193, -0.10244343429803848, -0.00010629849566612393, -0.034000463783741, -0.01127226185053587, -0.002430556109175086, 0.005671919323503971, 0.009195134043693542, -0.13230672478675842, -0.006214430555701256, -0.07031673192977905, -0.0019532665610313416, -0.015630707144737244, 0.0007331972592510283, 0.00572799239307642, 0.024316132068634033, 0.02418903075158596, -0.09510406851768494, -0.0060067325830459595, -0.0004061892395839095, 0.18963120877742767, 0.03281625732779503, -0.002578072715550661, -0.013093462213873863, 0.02123832330107689, 0.005748828873038292, -0.08939991146326065, -0.0964006632566452, -0.013411016203463078, 0.01019967719912529, -0.07981149852275848, -0.03332129120826721, 0.00030684395460411906, -0.003655275097116828, 0.16836021840572357, 0.02386033907532692, -0.11319509148597717, 0.10237407684326172, 0.1149057075381279, -0.06683475524187088, -0.08339164406061172, -0.013886799104511738]
  },
  {
    userId: "user_2",
    name: "kiran",
    enbeddings: [-0.019642366096377373, 0.01609555445611477, -0.004360165912657976, -0.0021243621595203876, -0.0342748686671257, 0.08195238560438156, -0.02200118638575077, -0.08414711058139801, -0.01016748882830143, -0.15918636322021484, -0.013003290630877018, 0.002961665391921997, -0.0032566252630203962, 0.00731981685385108, -0.0016863051569089293, 0.03847206383943558, -0.016342923045158386, -0.010246708989143372, 0.0005704021896235645, 0.007013160735368729, 0.16833224892616272, 0.014976420439779758, -0.054068129509687424, 0.0131841991096735, -0.13144612312316895, 0.019960427656769753, -0.026466649025678635, -0.08571795374155045, 0.045194111764431, 0.019438060000538826, 0.019774265587329865, 0.34495851397514343, -0.028034327551722527, -0.007396531756967306, -0.06656685471534729, 0.1339254230260849, 0.08427067846059799, -0.0017884767148643732, 0.004316014237701893, -0.35497355461120605, 0.0038769159000366926, 0.004842525348067284, 0.007817016914486885, -0.010068744421005249, -0.002796500688418746, 0.005124352872371674, -0.1128777265548706, 0.07451534271240234, -0.0007216021767817438, 0.056504905223846436, -0.11246227473020554, -0.0031699109822511673, -0.05219971388578415, 0.0025250441394746304, -0.02791525237262249, 0.006270662881433964, -0.07467246800661087, 0.004652977455407381, -0.06453900039196014, 0.01461912039667368, 0.002187126548960805, -0.07320410758256912, -0.055651187896728516, -0.0284395944327116, -0.011815656907856464, 0.08817809820175171, -0.003576695453375578, 0.05434984713792801, -0.000953122740611434, 0.0007985345437191427, -0.01839945837855339, -0.192709818482399, -0.1521662324666977, 0.006955153774470091, 0.0321582667529583, 0.003709483426064253, -0.000968757551163435, -0.004131385590881109, 0.09996774047613144, -0.0011762712383642793, -0.0016251914203166962, -0.037936750799417496, -0.013910045847296715, 0.0012902048183605075, -0.13555487990379333, 0.0014820089563727379, 0.0021600741893053055, -0.036294370889663696, 0.11196526139974594, 0.2313215285539627, -0.012474395334720612, -0.00023233961837831885, -0.004310133401304483, -0.02152768149971962, -0.2316034734249115, -0.08486682921648026, 0.00838653277605772, -0.11785241216421127, -0.00722213601693511, 0.0003505279019009322, 0.003745173802599311, 0.0002459966635797173, 0.008061474189162254, 0.0013902544742450118, -0.005963654723018408, 0.00564132584258914, -0.04825129732489586, -0.0019506611861288548, 0.0028003978077322245, 0.006539327558130026, 0.02743690460920334, 0.012538125738501549, 0.006922220811247826, -0.06742142140865326, 0.011496759951114655, -0.02673701010644436, -0.009620717726647854, -0.04551732540130615, 0.03303852304816246, 0.1884506493806839, 0.10735292732715607, -0.04082508757710457, -0.2263975590467453, -0.00630897656083107, 0.0022327357437461615, -0.0023893676698207855, 0.0029923641122877598, -0.00532623240724206, -0.005525242071598768, -0.03188410401344299, 0.009761486202478409, 0.018692631274461746, -0.002583495108410716, -0.039831627160310745, 0.006877470295876265, -0.006131104659289122, -0.0868310034275055, -0.06133051961660385, -0.020813746377825737, 0.01256554201245308, 0.0031322173308581114, -0.0057217516005039215, -0.0050553507171571255, -0.18517957627773285, -0.01469623576849699, 0.13033254444599152, -0.02207178622484207, -0.006894301623106003, 0.00679050711914897, -0.008055642247200012, 0.000056710185162955895, -0.05374477058649063, -0.04717255011200905, -0.01229159813374281, -0.003989724442362785, -0.0045975372195243835, 0.002652232302352786, 0.005802561994642019, -0.18320704996585846, 0.001741444575600326, -0.03943105787038803, -0.00022398045985028148, -0.005244238302111626, 0.000522850954439491, 0.00013553762983065099, 0.013770945370197296, -0.006627898663282394, -0.014415808022022247, -0.00453149015083909, 0.0013575059128925204, -0.15434472262859344, 0.011103388853371143, 0.0003176409809384495, 0.15803276002407074, 0.021415814757347107, 0.000971906294580549, 0.026947520673274994, -0.05192134901881218, -0.007350008934736252, 0.010016235522925854, -0.0580490417778492, 0.10935453325510025, -0.0030063563026487827, 0.003503951244056225, 0.061805397272109985, 0.011890067718923092, -0.06329748034477234, 0.027203498408198357, -0.013610969297587872, -0.13667075335979462, -0.04230760410428047, 0.0021928437054157257]
  },
  {
    userId: "user_3",
    name: "Deeksha",
    enbeddings: [-0.006890535354614258, 0.0027350459713488817, 0.007730769459158182, -0.005516884848475456, -0.020785555243492126, 0.09258633106946945, -0.050088878720998764, 0.1433631181716919, -0.11200761795043945, -0.18928983807563782, 0.013215689919888973, 0.011336295865476131, -0.004741540644317865, 0.01551053486764431, -0.0014365371316671371, 0.033516775816679, -0.01513648685067892, 0.005777856335043907, 0.005030953325331211, -0.0013745647156611085, -0.07148271054029465, 0.029610374942421913, -0.21279503405094147, 0.004987144842743874, 0.10188019275665283, -0.011864486150443554, -0.012890164740383625, 0.01678716577589512, 0.19634783267974854, 0.01630834862589836, -0.009345591999590397, 0.18510188162326813, 0.009383739903569221, 0.0012291138991713524, 0.18922145664691925, -0.07728544622659683, -0.09838583320379257, 0.005840109661221504, 0.006159717682749033, -0.05788397789001465, 0.0034968641120940447, 0.000601362029556185, 0.007745277136564255, -0.0025947727262973785, -0.0022568092681467533, -0.021140553057193756, 0.01070996280759573, 0.10088341683149338, -0.0033026966266334057, 0.0432581827044487, 0.1374479979276657, 0.0008283625356853008, -0.11479543894529343, -0.0019896901212632656, -0.06534168869256973, 0.004158973693847656, -0.07628253847360611, -0.002459326758980751, -0.0320483036339283, 0.006991037633270025, -0.030086658895015717, -0.015126404352486134, -0.044946424663066864, 0.031359344720840454, -0.0004535400657914579, 0.046842172741889954, -0.00006638689956162125, 0.01673964224755764, -0.0015651603462174535, 0.0012659602798521519, -0.013548169285058975, 0.2212173193693161, -0.21364767849445343, 0.002132382243871689, 0.03661445528268814, 0.011721538379788399, 0.0013544721296057105, 0.004802858456969261, 0.18739160895347595, 0.08441822230815887, 0.0005112453945912421, 0.0409824401140213, -0.005742160137742758, 0.15612879395484924, -0.09976562857627869, -0.0011865777196362615, -0.012171088717877865, -0.008023167960345745, 0.11160234361886978, -0.12984615564346313, 0.1305214762687683, 0.0017359505873173475, -0.01026150118559599, -0.019905688241124153, -0.07764091342687607, -0.09184320271015167, 0.0228384081274271, -0.1919802874326706, -0.00870893057435751, -0.005868219770491123, -0.0019513169536367059, -0.0008134129457175732, -0.01137071568518877, -0.004476659465581179, 0.001969988225027919, 0.006769643630832434, -0.11535357683897018, 0.0016065632225945592, -0.011415394954383373, 0.005275020841509104, 0.11902187019586563, 0.005039351526647806, 0.007738346233963966, -0.03646604344248772, -0.005883374251425266, 0.088751882314682, 0.0054929363541305065, -0.013959894888103008, 0.06304512172937393, 0.018246077001094818, -0.03680500015616417, -0.007360704708844423, -0.040402282029390335, -0.0014032032340765, -0.001853922032751143, -0.002446065191179514, 0.004803414456546307, -0.009378180839121342, 0.006768927443772554, 0.14352504909038544, 0.0024111177772283554, 0.011726189404726028, 0.0034181352239102125, 0.037517644464969635, 0.006453679874539375, 0.0006850739009678364, -0.16882207989692688, -0.06441903114318848, -0.0012534372508525848, 0.005279504228383303, -0.002641399158164859, -0.0015243716770783067, -0.0015851592179387808, -0.2675873041152954, 0.08092798292636871, -0.08299713581800461, 0.004642138257622719, -0.006930481176823378, -0.008873747661709785, -0.003448780160397291, -0.0067301420494914055, -0.023250406607985497, 0.10005523264408112, -0.008057158440351486, -0.004636113066226244, 0.001771297538653016, -0.0010944237001240253, -0.0030802018009126186, -0.048789966851472855, -0.006404024548828602, -0.009493689052760601, -0.006937406491488218, 0.0002811047888826579, -0.0004944264073856175, 0.0005352735752239823, 0.006858669687062502, 0.009661776944994926, 0.25363361835479736, -0.005027339328080416, -0.0037816378753632307, -0.1387168914079666, -0.04029533267021179, -0.0037751197814941406, -0.011071807704865932, 0.01621471345424652, -0.002960664452984929, -0.07583211362361908, -0.03188334032893181, -0.001841107732616365, 0.010694753378629684, -0.06920667737722397, -0.07921899110078812, 0.003079450223594904, -0.0015268153510987759, -0.0898980125784874, -0.1121751070022583, -0.12285273522138596, 0.09057199209928513, 0.2091275006532669, -0.021142859011888504, -0.024416713044047356, -0.01109910849481821]
  },
  {
    userId: "user_4",
    name: "parth",
    enbeddings:  [-0.01784294843673706, 0.00604041526094079, -0.0013967552222311497, 0.00163942389190197, -0.0379912443459034, 0.012246549129486084, -0.028176214545965195, -0.13186094164848328, 0.001739723258651793, 0.02092510648071766, -0.009651189669966698, 0.009134331718087196, -0.014053483493626118, 0.00913615059107542, -0.00508579658344388, 0.055335551500320435, -0.013522064313292503, -0.0072466786950826645, 0.0005798367783427238, 0.006731052882969379, -0.09581912308931351, 0.03446238860487938, 0.01797460950911045, 0.007047430146485567, -0.041688788682222366, 0.025447500869631767, -0.024184681475162506, 0.07814864814281464, 0.07697732001543045, -0.15295757353305817, 0.011235534213483334, 0.2997232973575592, 0.03646421805024147, -0.0057039810344576836, -0.1527557671070099, 0.08022630214691162, 0.27688297629356384, -0.033436067402362823, 0.008644665591418743, -0.4162614047527313, -0.0005953465006314218, 0.004654338117688894, 0.007136491127312183, -0.010414901189506054, 0.010808290913701057, -0.012209497392177582, -0.043775346130132675, -0.03489653766155243, -0.006330422591418028, 0.006604333408176899, -0.11746418476104736, -0.0032396900933235884, -0.12410002201795578, -0.000755816581659019, -0.03437768667936325, 0.007557797245681286, 0.14397069811820984, 0.003244120394811034, -0.07076887041330338, 0.022551706060767174, 0.006157999392598867, -0.0046928380616009235, -0.041230447590351105, -0.09004714339971542, -0.004875247832387686, 0.05357333645224571, -0.005272036883980036, 0.010279806330800056, -0.0019069507252424955, -0.005648022051900625, -0.02302388660609722, -0.0333808995783329, -0.07326879352331161, 0.0011505263391882181, -0.0491890087723732, 0.011644897051155567, 0.0002019765815930441, -0.0059155854396522045, 0.18857696652412415, 0.023535970598459244, -0.0032719492446631193, -0.05418332293629646, -0.01302215177565813, 0.01583411544561386, -0.07143697887659073, -0.0005195913836359978, 0.0022827109787613153, -0.01091283094137907, 0.026011338457465172, 0.0058158705942332745, 0.017149174585938454, -0.004045599140226841, 0.006223056931048632, -0.014304923824965954, -0.12513858079910278, -0.12918676435947418, 0.0016783056780695915, -0.06379646062850952, 0.00024881665012799203, -0.013656134717166424, 0.0023937432561069727, -0.008041219785809517, 0.002307094866409898, -0.0010786798084154725, -0.005495939403772354, 0.004869685973972082, -0.013788370415568352, -0.002191828330978751, 0.02177424728870392, 0.004012514371424913, 0.051646750420331955, 0.013143505901098251, -0.000956640811637044, -0.2255701720714569, 0.00945755373686552, -0.07856982201337814, -0.014715814031660557, -0.022539781406521797, 0.025853553786873817, 0.13678914308547974, 0.1529744565486908, -0.01185140572488308, -0.4004514515399933, -0.0019776769913733006, -0.0014117574319243431, -0.0015746323624625802, 0.0021723276004195213, 0.0026001727674156427, -0.005393499042838812, 0.03820984438061714, 0.007510419934988022, 0.01162757258862257, -0.003831642447039485, -0.01384766399860382, 0.05600527673959732, -0.01013875287026167, -0.10663115978240967, -0.06558351963758469, -0.010692520067095757, 0.0150148905813694, -0.005655697081238031, -0.001845691236667335, -0.0022908838000148535, -0.15203797817230225, -0.06174059584736824, 0.11202225834131241, -0.019244004040956497, -0.004306964110583067, 0.006858603563159704, -0.010637016966938972, 0.0054235015995800495, 0.01128439325839281, 0.07574955374002457, -0.01882748119533062, 0.00006491124804597348, 0.0011859256774187088, -0.002340200124308467, 0.01571567915380001, 0.015713263303041458, 0.0017266464419662952, -0.05938965454697609, -0.000453790562460199, -0.009663816541433334, 0.00021004459995310754, -0.002687097992748022, 0.02091885544359684, 0.008477996103465557, 0.0014726651133969426, -0.0018587643280625343, 0.005631852895021439, 0.09403328597545624, -0.014778907410800457, 0.001578055671416223, 0.06725887954235077, -0.023651935160160065, 0.0010533021995797753, 0.04334266856312752, -0.06258801370859146, -0.005390698555856943, 0.006836327724158764, -0.06303729116916656, 0.09294754266738892, -0.0029825344681739807, 0.002467442536726594, -0.03492891788482666, -0.09298500418663025, 0.003325443482026458, 0.048557572066783905, -0.014378412626683712, -0.06844781339168549, -0.0444633811712265, 0.006045322399586439]
  },
  {
    userId: "user_5",
    name: "parth",
    enbeddings:  [-0.01784294843673706, 0.00604041526094079, -0.0013967552222311497, 0.00163942389190197, -0.0379912443459034, 0.012246549129486084, -0.028176214545965195, -0.13186094164848328, 0.001739723258651793, 0.02092510648071766, -0.009651189669966698, 0.009134331718087196, -0.014053483493626118, 0.00913615059107542, -0.00508579658344388, 0.055335551500320435, -0.013522064313292503, -0.0072466786950826645, 0.0005798367783427238, 0.006731052882969379, -0.09581912308931351, 0.03446238860487938, 0.01797460950911045, 0.007047430146485567, -0.041688788682222366, 0.025447500869631767, -0.024184681475162506, 0.07814864814281464, 0.07697732001543045, -0.15295757353305817, 0.011235534213483334, 0.2997232973575592, 0.03646421805024147, -0.0057039810344576836, -0.1527557671070099, 0.08022630214691162, 0.27688297629356384, -0.033436067402362823, 0.008644665591418743, -0.4162614047527313, -0.0005953465006314218, 0.004654338117688894, 0.007136491127312183, -0.010414901189506054, 0.010808290913701057, -0.012209497392177582, -0.043775346130132675, -0.03489653766155243, -0.006330422591418028, 0.006604333408176899, -0.11746418476104736, -0.0032396900933235884, -0.12410002201795578, -0.000755816581659019, -0.03437768667936325, 0.007557797245681286, 0.14397069811820984, 0.003244120394811034, -0.07076887041330338, 0.022551706060767174, 0.006157999392598867, -0.0046928380616009235, -0.041230447590351105, -0.09004714339971542, -0.004875247832387686, 0.05357333645224571, -0.005272036883980036, 0.010279806330800056, -0.0019069507252424955, -0.005648022051900625, -0.02302388660609722, -0.0333808995783329, -0.07326879352331161, 0.0011505263391882181, -0.0491890087723732, 0.011644897051155567, 0.0002019765815930441, -0.0059155854396522045, 0.18857696652412415, 0.023535970598459244, -0.0032719492446631193, -0.05418332293629646, -0.01302215177565813, 0.01583411544561386, -0.07143697887659073, -0.0005195913836359978, 0.0022827109787613153, -0.01091283094137907, 0.026011338457465172, 0.0058158705942332745, 0.017149174585938454, -0.004045599140226841, 0.006223056931048632, -0.014304923824965954, -0.12513858079910278, -0.12918676435947418, 0.0016783056780695915, -0.06379646062850952, 0.00024881665012799203, -0.013656134717166424, 0.0023937432561069727, -0.008041219785809517, 0.002307094866409898, -0.0010786798084154725, -0.005495939403772354, 0.004869685973972082, -0.013788370415568352, -0.002191828330978751, 0.02177424728870392, 0.004012514371424913, 0.051646750420331955, 0.013143505901098251, -0.000956640811637044, -0.2255701720714569, 0.00945755373686552, -0.07856982201337814, -0.014715814031660557, -0.022539781406521797, 0.025853553786873817, 0.13678914308547974, 0.1529744565486908, -0.01185140572488308, -0.4004514515399933, -0.0019776769913733006, -0.0014117574319243431, -0.0015746323624625802, 0.0021723276004195213, 0.0026001727674156427, -0.005393499042838812, 0.03820984438061714, 0.007510419934988022, 0.01162757258862257, -0.003831642447039485, -0.01384766399860382, 0.05600527673959732, -0.01013875287026167, -0.10663115978240967, -0.06558351963758469, -0.010692520067095757, 0.0150148905813694, -0.005655697081238031, -0.001845691236667335, -0.0022908838000148535, -0.15203797817230225, -0.06174059584736824, 0.11202225834131241, -0.019244004040956497, -0.004306964110583067, 0.006858603563159704, -0.010637016966938972, 0.0054235015995800495, 0.01128439325839281, 0.07574955374002457, -0.01882748119533062, 0.00006491124804597348, 0.0011859256774187088, -0.002340200124308467, 0.01571567915380001, 0.015713263303041458, 0.0017266464419662952, -0.05938965454697609, -0.000453790562460199, -0.009663816541433334, 0.00021004459995310754, -0.002687097992748022, 0.02091885544359684, 0.008477996103465557, 0.0014726651133969426, -0.0018587643280625343, 0.005631852895021439, 0.09403328597545624, -0.014778907410800457, 0.001578055671416223, 0.06725887954235077, -0.023651935160160065, 0.0010533021995797753, 0.04334266856312752, -0.06258801370859146, -0.005390698555856943, 0.006836327724158764, -0.06303729116916656, 0.09294754266738892, -0.0029825344681739807, 0.002467442536726594, -0.03492891788482666, -0.09298500418663025, 0.003325443482026458, 0.048557572066783905, -0.014378412626683712, -0.06844781339168549, -0.0444633811712265, 0.006045322399586439]
  },
  {
    userId: "user_6",
    name: "Akash",
    enbeddings: [-0.01784294843673706, 0.00604041526094079, -0.0013967552222311497, 0.00163942389190197, -0.0379912443459034, 0.012246549129486084, -0.028176214545965195, -0.13186094164848328, 0.001739723258651793, 0.02092510648071766, -0.009651189669966698, 0.009134331718087196, -0.014053483493626118, 0.00913615059107542, -0.00508579658344388, 0.055335551500320435, -0.013522064313292503, -0.0072466786950826645, 0.0005798367783427238, 0.006731052882969379, -0.09581912308931351, 0.03446238860487938, 0.01797460950911045, 0.007047430146485567, -0.041688788682222366, 0.025447500869631767, -0.024184681475162506, 0.07814864814281464, 0.07697732001543045, -0.15295757353305817, 0.011235534213483334, 0.2997232973575592, 0.03646421805024147, -0.0057039810344576836, -0.1527557671070099, 0.08022630214691162, 0.27688297629356384, -0.033436067402362823, 0.008644665591418743, -0.4162614047527313, -0.0005953465006314218, 0.004654338117688894, 0.007136491127312183, -0.010414901189506054, 0.010808290913701057, -0.012209497392177582, -0.043775346130132675, -0.03489653766155243, -0.006330422591418028, 0.006604333408176899, -0.11746418476104736, -0.0032396900933235884, -0.12410002201795578, -0.000755816581659019, -0.03437768667936325, 0.007557797245681286, 0.14397069811820984, 0.003244120394811034, -0.07076887041330338, 0.022551706060767174, 0.006157999392598867, -0.0046928380616009235, -0.041230447590351105, -0.09004714339971542, -0.004875247832387686, 0.05357333645224571, -0.005272036883980036, 0.010279806330800056, -0.0019069507252424955, -0.005648022051900625, -0.02302388660609722, -0.0333808995783329, -0.07326879352331161, 0.0011505263391882181, -0.0491890087723732, 0.011644897051155567, 0.0002019765815930441, -0.0059155854396522045, 0.18857696652412415, 0.023535970598459244, -0.0032719492446631193, -0.05418332293629646, -0.01302215177565813, 0.01583411544561386, -0.07143697887659073, -0.0005195913836359978, 0.0022827109787613153, -0.01091283094137907, 0.026011338457465172, 0.0058158705942332745, 0.017149174585938454, -0.004045599140226841, 0.006223056931048632, -0.014304923824965954, -0.12513858079910278, -0.12918676435947418, 0.0016783056780695915, -0.06379646062850952, 0.00024881665012799203, -0.013656134717166424, 0.0023937432561069727, -0.008041219785809517, 0.002307094866409898, -0.0010786798084154725, -0.005495939403772354, 0.004869685973972082, -0.013788370415568352, -0.002191828330978751, 0.02177424728870392, 0.004012514371424913, 0.051646750420331955, 0.013143505901098251, -0.000956640811637044, -0.2255701720714569, 0.00945755373686552, -0.07856982201337814, -0.014715814031660557, -0.022539781406521797, 0.025853553786873817, 0.13678914308547974, 0.1529744565486908, -0.01185140572488308, -0.4004514515399933, -0.0019776769913733006, -0.0014117574319243431, -0.0015746323624625802, 0.0021723276004195213, 0.0026001727674156427, -0.005393499042838812, 0.03820984438061714, 0.007510419934988022, 0.01162757258862257, -0.003831642447039485, -0.01384766399860382, 0.05600527673959732, -0.01013875287026167, -0.10663115978240967, -0.06558351963758469, -0.010692520067095757, 0.0150148905813694, -0.005655697081238031, -0.001845691236667335, -0.0022908838000148535, -0.15203797817230225, -0.06174059584736824, 0.11202225834131241, -0.019244004040956497, -0.004306964110583067, 0.006858603563159704, -0.010637016966938972, 0.0054235015995800495, 0.01128439325839281, 0.07574955374002457, -0.01882748119533062, 0.00006491124804597348, 0.0011859256774187088, -0.002340200124308467, 0.01571567915380001, 0.015713263303041458, 0.0017266464419662952, -0.05938965454697609, -0.000453790562460199, -0.009663816541433334, 0.00021004459995310754, -0.002687097992748022, 0.02091885544359684, 0.008477996103465557, 0.0014726651133969426, -0.0018587643280625343, 0.005631852895021439, 0.09403328597545624, -0.014778907410800457, 0.001578055671416223, 0.06725887954235077, -0.023651935160160065, 0.0010533021995797753, 0.04334266856312752, -0.06258801370859146, -0.005390698555856943, 0.006836327724158764, -0.06303729116916656, 0.09294754266738892, -0.0029825344681739807, 0.002467442536726594, -0.03492891788482666, -0.09298500418663025, 0.003325443482026458, 0.048557572066783905, -0.014378412626683712, -0.06844781339168549, -0.0444633811712265, 0.006045322399586439]
  },
  {
    userId: "user_6",
    name: "Ashish",
    enbeddings:[-0.01283378154039383, 0.018154526129364967, 0.0032011724542826414, -0.011188223958015442, -0.04122656583786011, 0.02175876311957836, -0.22265179455280304, 0.05786950886249542, -0.07614055275917053, -0.21328577399253845, -0.009493786841630936, 0.004135184921324253, -0.0042503830045461655, 0.0028831111267209053, 0.0009043427417054772, -0.012213843874633312, -0.0327615886926651, -0.0082236984744668, 0.004381407983601093, 0.009350961074233055, 0.2461063712835312, 0.006999284960329533, -0.09499499946832657, 0.0095355911180377, -0.0006992690032348037, 0.017943229526281357, -0.03152897581458092, -0.0068809352815151215, -0.005639534443616867, -0.0432572215795517, 0.016695542261004448, 0.09462045133113861, 0.08531641960144043, -0.010862334631383419, -0.27551984786987305, 0.20196346938610077, 0.14618395268917084, 0.001303996192291379, 0.0005054940120317042, -0.2884070873260498, -0.003472312819212675, 0.002005079062655568, -0.0028607514686882496, -0.0021143623162060976, 0.004409012384712696, -0.03680390492081642, -0.05856817960739136, 0.09678719192743301, -0.003831895999610424, 0.010019902139902115, -0.06688478589057922, 0.001057649846188724, -0.022880109027028084, -0.0010753828100860119, -0.16071467101573944, 0.001449806266464293, -0.04201153293251991, 0.0044473339803516865, -0.0564570352435112, 0.0156061677262187, 0.027777688577771187, 0.014983098953962326, 0.0005579350399784744, -0.007458618376404047, 0.00012871497892774642, 0.2656598687171936, -0.0009267308632843196, 0.010133013129234314, 0.00704545620828867, -0.005092001054435968, -0.016195131465792656, -0.20922918617725372, -0.16438375413417816, 0.0017556586535647511, -0.08701416850090027, 0.012934853322803974, 0.0043263821862638, -0.0002764828968793154, 0.24373987317085266, -0.08738020062446594, 0.0038140076212584972, -0.010217403061687946, -0.0041875108145177364, 0.07278293371200562, -0.01431961264461279, -0.001965781906619668, -0.008983667939901352, 0.02154318243265152, 0.009683173149824142, 0.1453022062778473, 0.07741712033748627, -0.007197472266852856, -0.005751915741711855, -0.02065412700176239, -0.11701083928346634, -0.04272318631410599, 0.0009418230620212853, -0.041654858738183975, -0.01249025110155344, 0.01635703258216381, 0.005782625637948513, -0.0034632892347872257, 0.005283963866531849, -0.00179720064625144, -0.0029248089995235205, 0.007504906505346298, -0.1144077479839325, 0.0017741176998242736, 0.007495284080505371, 0.007017798721790314, -0.02855948731303215, 0.00744200823828578, 0.00894465297460556, -0.1984485238790512, 0.006295646075159311, -0.06540415436029434, -0.0037450643721967936, -0.001292987260967493, -0.04343554750084877, -0.015842346474528313, -0.016701461747288704, 0.02368009090423584, -0.09644429385662079, -0.005589300766587257, 0.00602200161665678, 0.0047887228429317474, 0.008841332979500294, -0.00809424091130495, 0.016244059428572655, 0.04637773707509041, 0.010880385525524616, 0.026567691937088966, -0.0027191946282982826, 0.031884294003248215, 0.004723621066659689, -0.005915817338973284, -0.14996042847633362, -0.044721946120262146, 0.001675397390499711, 0.021640777587890625, 0.0023771245032548904, -0.009124081581830978, 0.005643213167786598, -0.2076587826013565, 0.08640509098768234, 0.06414605677127838, -0.01487724855542183, 0.0017107091844081879, 0.0043306779116392136, 0.008724798448383808, -0.008662017062306404, -0.19064529240131378, -0.0010112214367836714, -0.010849082842469215, -0.008689431473612785, 0.0035789483226835728, 0.00364553090184927, 0.01193732488900423, -0.056675516068935394, 0.001215231604874134, -0.030178168788552284, -0.001004587858915329, 0.0021072530653327703, 0.000958725344389677, -0.0017377255717292428, 0.013578520156443119, 0.005231719929724932, -0.030928684398531914, -0.011674685403704643, -0.008915115147829056, -0.088189035654068, -0.04332422837615013, 0.0010863842908293009, -0.003575068898499012, 0.008246573619544506, -0.0009847917826846242, 0.06043968349695206, -0.030390724539756775, -0.0064657884649932384, 0.0047584217973053455, -0.17812056839466095, 0.025509361177682877, 0.009880656376481056, -0.000187011988600716, 0.014437328092753887, 0.048741623759269714, -0.012552141211926937, 0.05288621783256531, -0.08788739889860153, -0.04804116114974022, -0.03603143244981766, 0.0014700796455144882]
  }
  
]

const App = ({userNameNew, setEmbedding}) => {
  const [model, setModel] = useState(null)
  const [face, setFaces] = useState([])
  const [cameraPermission, setCameraPermission] = useState(null);
  const [isPermissionGranted, setIsPermissionGranted] = useState(false);
  const cameraRef = useRef(null);
  const devices = useCameraDevice('front')
  const plugin = useTensorflowModel(require('../assets/mobilefacenet.tflite'))
  const { detectFaces } = useFaceDetector()
  const [resizedImageUri, setResizedImageUri] = useState(null);
  const [rawPhotUri, setRawPhotoUri] = useState("")
  const { height, width } = useWindowDimensions()
  const fontSize = 32;
  const font = useFont(require("../assets/font/Nasa21.ttf"), fontSize);
  const [userName, setUserName] = useState("unknown")

  const displayName = userNameNew?.userName || userName;
  // load model 
  useEffect(() => {
    if (plugin) {
      setModel(plugin)
      // console.log("modal load sucessfully")
    } else {
      // console.log("model loading failed");
    }
  }, [plugin])

  const db = SQLite.openDatabase(
    {
      name: 'UserDatabase.db',
      location: 'default',
    },
    () => {
      // console.log('Database opened');
    },
    (error) => {
      // console.error('Error opening database:', error);
    }
  );

  useEffect(() => {
    createTable();
    insertUserData();
  }, []);

  const createTable = () => {
    db.transaction((tx) => {
      tx.executeSql(
        `CREATE TABLE IF NOT EXISTS Users (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          userId TEXT,
          name TEXT,
          embeddings TEXT
        );`,
        [],
        () => {
          // console.log('Table created successfully');
        },
        (error) => {
          // console.error('Error creating table:', error);
        }
      );
    });
  };
  const insertUserData = () => {
    const userData = [
      {
        userId: 'user_1',
        name: 'rohit',
        embeddings: [-0.02917907014489174, 0.018659574910998344, -0.002252353820949793],
      },
      {
        userId: 'user_2',
        name: 'kiran',
        embeddings: [-0.019642366096377373, 0.01609555445611477, -0.004360165912657976],
      },
      // Add other users
    ];

    db.transaction((tx) => {
      userData.forEach((user) => {
        tx.executeSql(
          `INSERT INTO Users (userId, name, embeddings) VALUES (?, ?, ?);`,
          [user.userId, user.name, JSON.stringify(user.embeddings)],
          () => {
            // console.log(`User ${user.name} inserted successfully`);
          },
          (error) => {
            // console.error('Error inserting user:', error);
          }
        );
      });
    });
  };


  //camera permission
  useEffect(() => {
    const requestPermission = async () => {
      try {
        const status = await Camera.requestCameraPermission();
        setCameraPermission(status);
        if (status === 'granted') {
          setIsPermissionGranted(true);
        } else {
          console.warn('Camera permission denied:', status);
        }
      } catch (error) {
        console.error('Permission request error:', error);
      }
    };
    requestPermission();
  }, []);



  const clearCache = async () => {

    try {
      const cacheDir = RNFS.CachesDirectoryPath;
      // console.log("Cache directory:", cacheDir);

      // Remove all files in the cache directory
      await RNFS.unlink(cacheDir);
      // console.log("Cache cleared successfully.");

      // Recreate the cache directory if needed
      await RNFS.mkdir(cacheDir);
    } catch (error) {
      // console.error("Error clearing cache:", error);
    }
  };


  const takeSnapshot = async (faces) => {

    if (!cameraRef.current || faces.length === 0) {
      console.warn("No camera or no face detected.");
      return;
    }
    try {
      const photo = await cameraRef.current.takePhoto({
        quality: 1, // Adjust quality as needed
      });
      // console.log(photo.height)
      const rawPhotoUri = `file://${photo.path}`;
      // console.log(rawPhotoUri)

      // setRawPhotoUri(`file://${photo.path}`)

      const { x, y, width, height } = faces[0].bounds;

      const frameWidth = 640; // Frame width
      const frameHeight = 480; // Frame height

      const photoWidth = photo.width; // Actual photo width
      const photoHeight = photo.height; // Actual photo height

      const scaleX = photoWidth / frameWidth;
      const scaleY = photoHeight / frameHeight;

      // const aspectRatioFrame = frameWidth / frameHeight;
      // const aspectRatioPhoto = photoWidth / photoHeight;

      // let cropX = x * scaleX;
      // let cropY = y * scaleY;
      // let cropWidth = width * scaleX;
      // let cropHeight = height * scaleY;

      // if (aspectRatioFrame !== aspectRatioPhoto) {
      //   if (aspectRatioPhoto > aspectRatioFrame) {
      //     // Photo is wider than frame, adjust Y
      //     const adjustedFrameHeight = frameWidth / aspectRatioPhoto;
      //     const yOffset = (frameHeight - adjustedFrameHeight) / 2;
      //     cropY = (y - yOffset) * scaleY;
      //   } else {
      //     // Photo is taller than frame, adjust X
      //     const adjustedFrameWidth = frameHeight * aspectRatioPhoto;
      //     const xOffset = (frameWidth - adjustedFrameWidth) / 2;
      //     cropX = (x - xOffset) * scaleX;
      //   }
      // }

      const manualOffsetX = 350; // Adjust horizontal position (positive moves right)
      const manualOffsetY = -350; // Adjust vertical position (positive moves down)
      const manualScaleWidth = 1; // Scale width (1.1 increases by 10%)
      const manualScaleHeight = 1; // Scale height (1.1 increases by 10%)

      // Apply manual adjustments
      let cropX = x * scaleX + manualOffsetX;
      let cropY = y * scaleY + manualOffsetY;
      let cropWidth = width * scaleX * manualScaleWidth;
      let cropHeight = height * scaleY * manualScaleHeight;

      // Ensure cropping coordinates are within bounds
      cropX = Math.max(0, cropX);
      cropY = Math.max(0, cropY);
      cropWidth = Math.min(photoWidth - cropX, cropWidth);
      cropHeight = Math.min(photoHeight - cropY, cropHeight);

      // console.log("Scaled coordinates for cropping:", cropX, cropY, cropWidth, cropHeight);
      const cropData = {
        offset: { x: cropX, y: cropY },
        size: { width: cropWidth, height: cropHeight },
        resizeMode: 'cover',
      };
      const croppedImageUri = await ImageEditor.cropImage(rawPhotoUri, cropData);
      // console.log('Cropped Image URI:', croppedImageUri.path);
      resizeImage(croppedImageUri.uri)

    } catch (error) {
      // console.error("Error taking snapshot or cropping:", error);
    }
  }

  const imageProessing = async (image) => {
    const width = image.width();
    const height = image.height();
    const pixelData = image.readPixels();

    const floatArray = new Float32Array(width * height * 3);
    for (let i = 0, j = 0; i < pixelData.length; i += 4, j += 3) {
      floatArray[j] = pixelData[i] / 255;       // Red channel
      floatArray[j + 1] = pixelData[i + 1] / 255; // Green channel
      floatArray[j + 2] = pixelData[i + 2] / 255; // Blue channel
    }
    // console.log("Float32Array:", floatArray.length);
    handleModelOutput(floatArray)
  }

  const resizeImage = async (imageUri) => {
    try {
      const resizedImage = await ImageResizer.createResizedImage(
        imageUri,
        112, // Target width
        112, // Target height
        'JPEG', // Format: 'JPEG', 'PNG', 'WEBP'
        100 // Quality (0-100)
      );
      // console.log('Resized Image URI:', resizedImage.uri);
      setResizedImageUri(resizedImage.uri);

    } catch (error) {
      // console.error('Error resizing image:', error);
    }
  };

  const image = useImage(resizedImageUri || null)

  const handleModelOutput = async (inputFloatArray) => {
    try {
      const inferenceResult = await model.model.run([inputFloatArray]);

      if (Array.isArray(inferenceResult)) {
        const output = inferenceResult[0];

        setEmbedding(output)
        userData.forEach(user => {
          const distance = calculateEuclideanDistance(output, user.enbeddings);

          if (distance < 0.7) {
            // console.log('detacted as', user.name, ':', distance);// Print the name if distance is less than 6.7
            setUserName(user.name)
          } else {
            // console.log('not recognized as', user.name, 'distance is', distance);
            
          }
        });

      } else {
        setResult("Inference failed: Invalid result format.");
      }
    } catch (error) {
      // console.error("Error during inference:", error);
    }
  }

  const calculateEuclideanDistance = (point1, point2) => {
    let sumOfSquares = 0;

    for (let i = 0; i < point1.length; i++) {
      sumOfSquares += Math.pow(point1[i] - point2[i], 2);
    }

    return Math.sqrt(sumOfSquares);
  };

  useEffect(() => {
    const interval = setInterval(() => {
      clearCache();
      setUserName("unknown");
    }, 5000); // Clears cache every 5 seconds

    return () => clearInterval(interval); // Cleanup on unmount
  }, []);

  useEffect(() => {
    if (image) {
      imageProessing(image); // Process the image once it's loaded
    }
  }, [image]);

  const handleDetectFace = Worklets.createRunOnJS(faces => {
    if (faces.length > 0) {
      setFaces(faces)
      takeSnapshot(faces)
    } else {

      // console.log('No faces detected');
      setFaces([]); // Clear previous faces if needed
    }

  })

  const frameProcessor = useFrameProcessor((frame) => {
    'worklet';
    try {
      const faces = detectFaces(frame)

      handleDetectFace(faces)

    } catch (error) {
      // console.error(error.stack);
    }
  }, []);

  return (
    <View style={styles.container}>
      {isPermissionGranted && devices ? (
        <>
          <Camera
            ref={cameraRef}
            photo={true}
            style={StyleSheet.absoluteFill}
            device={devices}
            isActive={true}
            frameProcessor={frameProcessor}
          />
          <Canvas style={StyleSheet.absoluteFill}
            onLayout={(event) => {
              const { width, height } = event.nativeEvent.layout;

            }}>

            {face.map((face, index) => (
              <>
                <Rect
                  key={index}
                  x={face.bounds.x * 0.62}
                  y={face.bounds.y * 1.3}
                  width={face.bounds.width * 1.3}
                  height={face.bounds.height * 1.6}
                  color="rgba(255, 243, 15, 0.5)" // Semi-transparent red
                  style="stroke"
                  strokeWidth={4}
                />
                <SkText
                  x={face.bounds.x / 1.5}
                  y={face.bounds.y * 1.3}
                  text={`Hello, ${displayName}!`}
                  font={font}
                  color="white"
                />
              </>
            ))}
            <Line
              p1={{ x: width / 2, y: (height / 2) - 10 }} // Start point (middle-top)
              p2={{ x: width / 2, y: (height / 2) + 10 }} // End point (middle-bottom)
              color="green" // Color of the vertical line
              strokeWidth={2} // Thickness of the line
            />
            {/* Draw Horizontal Line for Cross */}
            <Line
              p1={{ x: (width / 2) - 10, y: height / 2 }} // Start point (left-middle)
              p2={{ x: (width / 2) + 10, y: height / 2 }} // End point (right-middle)
              color="green" // Color of the horizontal line
              strokeWidth={2} // Thickness of the line
            />

            {/* Function to render corner lines */}
            {[
              { x: width / 4, y: height / 3, dx: 20, dy: 20 }, // Top-Left
              { x: (3 * width) / 4, y: height / 3, dx: -20, dy: 20 }, // Top-Right
              { x: width / 4, y: (2 * height) / 3, dx: 20, dy: -20 }, // Bottom-Left
              { x: (3 * width) / 4, y: (2 * height) / 3, dx: -20, dy: -20 }, // Bottom-Right
            ].map((corner, index) => (
              <React.Fragment key={index}>
                <Line
                  p1={{ x: corner.x, y: corner.y }}
                  p2={{ x: corner.x, y: corner.y + corner.dy }}
                  color="red"
                  strokeWidth={4}
                />
                <Line
                  p1={{ x: corner.x, y: corner.y }}
                  p2={{ x: corner.x + corner.dx, y: corner.y }}
                  color="red"
                  strokeWidth={4}
                />
              </React.Fragment>
            ))}

          </Canvas>
          <Image
            source={{ uri: resizedImageUri }}
            style={styles.image}
          />
        </>
      ) : (
        <View style={styles.centeredView}>
          <Text style={styles.text}>
            {cameraPermission === 'denied'
              ? 'Camera permission denied. Please enable it in settings.'
              : 'Requesting camera permission...'}
          </Text>
        </View>
      )}
    </View>
  )
}
const styles = StyleSheet.create({
  container: {
    flex:1,
    backgroundColor: '#fff',
  },
  centeredView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#000',
  },
  text: {
    color: '#fff',
    fontSize: 16,
  },
  image: {
    width: 200,
    height: 200,
    top: 20,
    resizeMode: 'contain'
  },
});

export default App